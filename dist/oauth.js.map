{
  "version": 3,
  "sources": ["../src/oauth.ts"],
  "sourcesContent": ["const endpoint = {\n  \n    webflowAuthorize: `https://webflow.com/oauth/authorize?client_id=9434ab646a433437cef0f70dba6a15ea7071c8e88bb9c3b4b834d64eccd8f8e1&response_type=code`,\n\n    addAccountKey: \"https://eol14so2nvvpr3e.m.pipedream.net\", \n    getAccount: \"https://eoulx2y119m77lz.m.pipedream.net\", // ?account_id\n\n    listSites: \"https://eo56mvz3ecrucu.m.pipedream.net\", \n\n}\n\nconst sygnalAppPage = \"/u/app\"; \n\n// Initiate OAuth request to Webflow\n// Sets up button\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // const user = getUserInfo();\n    // const oAuthRedirectUrl = `https://eol14so2nvvpr3e.m.pipedream.net?account_id=${user.account_id}`;\n    // console.log(oAuthRedirectUrl);\n\n    const oAuthUrl = endpoint.webflowAuthorize;  // Assuming endpoint is globally available\n    console.log(oAuthUrl);\n\n    const installAppElement = document.getElementById(\"install-app\") as HTMLAnchorElement;\n    if (installAppElement) {\n        installAppElement.href = oAuthUrl;\n    }\n});\n  \n\n  // OAuth Redirect\n  // https://www.sygnal.com/u/app \n  \ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(window.location.pathname);\n    \n    // Assuming sygnalAppPage is globally available\n    if (window.location.pathname === sygnalAppPage) {  \n        const searchParams = new URLSearchParams(window.location.search);\n\n        if (searchParams.has(\"code\")) {\n            completeOAuth();  // Assuming completeOAuth is globally available\n        } else {\n            loadAppSettings();  // Assuming loadAppSettings is globally available\n        }\n    }\n});\n\n\n// Need to translate \n\n\n\n\n\n//   function resetSelect($sel) {\n  \n//     $sel\n//       .find('option')\n//       .remove()\n//       .end()\n//       .append('<option value=\"\">( select one )</option>')\n//       .val('');\n    \n//   }\n  \n\n  function resetSelect(sel: HTMLSelectElement): void {\n    // Remove all options\n    while (sel.firstChild) {\n        sel.removeChild(sel.firstChild);\n    }\n\n    // Append the default option\n    const defaultOption = document.createElement(\"option\");\n    defaultOption.value = \"\";\n    defaultOption.textContent = \"( select one )\";\n    sel.appendChild(defaultOption);\n\n    // Set the value to an empty string\n    sel.value = '';\n}\n\n\n\nfunction getUserInfo(): any {\n    return null;\n}\n\n/*\n\n  function loadAppSettings() {\n  \n    const user = getUserInfo(); \n  \n    resetSelect($(\"#config-key\")); \n    resetSelect($(\"#config-site\"));\n    \n    resetSelect($(\"#config-app\")); \n    $(\"#config-app\").append(`<option value=\"counter\">Counter</option>`);\n  \n    \n    $.getJSON(`${endpoint.getAccount}/?account_id=${user.account_id}`, function(account) {\n      \n      console.log(account);\n      \n      $(\"[data-bind='account.name']\").text(account.name); \n  \n      // List of connections\n  \n      // config-key \n      account.keys.forEach(key => {\n        $(\"#config-key\").append(`<option value=\"${key}\">${key}</option>`); \n      });\n  \n      $(\"#config-key\").change(function() {\n        \n        resetSelect($(\"#config-site\")); \n        \n        const key = $(this).val();\n    \n        $.getJSON(`${endpoint.listSites}/?key=${key}`, function(sites) { \n  \n          sites.forEach(site => { \n            $(\"#config-site\").append(`<option value=\"${site._id}\">${site.name}</option>`); \n          }); \n  \n        });\n        \n  //      if (key)\n        \n      });\n      \n      // config-site \n  //    $(\"#config-site\").append(`<option value=\"counter\">BROJO</option>`);\n      \n      // config-app\n  //    $(\"#config-app\").append(`<option value=\"counter\">Counter</option>`);\n  //    $(\"#config-app\").append(`<option value=\"${optionValue}\">${optionText}</option>`);\n      \n      // generate-code\n      $(\"#generate-code\").click(function() {\n      \n        // code\n        $(\"#code\").html(\"TEST\"); \n        \n      });\n      \n    }); \n    \n  }\n  */\n  function loadAppSettings(): void {\n    const user = getUserInfo();  // Assuming getUserInfo is globally available\n\n    // Reset the select elements\n    const configKey = document.getElementById(\"config-key\") as HTMLSelectElement;\n    const configSite = document.getElementById(\"config-site\") as HTMLSelectElement;\n    const configApp = document.getElementById(\"config-app\") as HTMLSelectElement;\n    resetSelect(configKey);\n    resetSelect(configSite);\n    resetSelect(configApp);\n\n    // Append option to config-app\n    const option = document.createElement(\"option\");\n    option.value = \"counter\";\n    option.textContent = \"Counter\";\n    configApp.appendChild(option);\n\n    fetch(`${endpoint.getAccount}/?account_id=${user.account_id}`)\n        .then(response => response.json())\n        .then(account => {\n            console.log(account);\n\n            // Assuming [data-bind='account.name'] is unique\n            const accountNameElement = document.querySelector(\"[data-bind='account.name']\");\n            if (accountNameElement) {\n                accountNameElement.textContent = account.name;\n            }\n\n            // Populate config-key\n            account.keys.forEach(key => {\n                const option = document.createElement(\"option\");\n                option.value = key;\n                option.textContent = key;\n                configKey.appendChild(option);\n            });\n\n            configKey.addEventListener(\"change\", function() {\n                const selectedKey = this.value;\n                resetSelect(configSite);\n\n                fetch(`${endpoint.listSites}/?key=${selectedKey}`)\n                    .then(response => response.json())\n                    .then(sites => {\n                        sites.forEach(site => {\n                            const option = document.createElement(\"option\");\n                            option.value = site._id;\n                            option.textContent = site.name;\n                            configSite.appendChild(option);\n                        });\n                    });\n            });\n\n            const generateCodeBtn = document.getElementById(\"generate-code\");\n            if (generateCodeBtn) {\n                generateCodeBtn.addEventListener(\"click\", function() {\n                    const codeElement = document.getElementById(\"code\");\n                    if (codeElement) {\n                        codeElement.innerHTML = \"TEST\";\n                    }\n                });\n            }\n        });\n}\n\n// Note: The resetSelect function from the previous answer will be used here.\n\n\n//   function completeOAuth() {\n        \n//       console.group(\"OAuth redirect.\");\n      \n//       const user = getUserInfo(); \n  \n//     // Get querystring [code]\n//       const searchParams = new URLSearchParams(window.location.search);\n      \n//       var conn = {\n//         account_id: user.account_id,\n//         code: searchParams.get('code')\n//       }\n  \n//   //     console.log(JSON.stringify(conn,null,2)); \n      \n//       // JSON package, including user data\n  \n//       // ONE key or many?  \n//       var jqxhr = $.post( endpoint.addAccountKey, JSON.stringify(conn,null,2))\n//         .done(function() {\n//   //        alert( \"success\" );\n          \n//           // Remove oauth querystring key\n//           window.location.replace(sygnalAppPage); // \"/u/app\");\n          \n//         })\n//         .fail(function() {\n//           alert( \"Unable to complete setup, please message web@sygnal.com\" );\n//         });\n  \n//       console.groupEnd();\n  \n//   } \n\nfunction completeOAuth(): void {\n    console.group(\"OAuth redirect.\");\n\n    const user = getUserInfo();  // Assuming getUserInfo is globally available\n\n    // Get 'code' from the query string\n    const searchParams = new URLSearchParams(window.location.search);\n    const conn = {\n        account_id: user.account_id,\n        code: searchParams.get('code')\n    };\n\n    // Uncomment the line below if you want to log the conn object\n    // console.log(JSON.stringify(conn, null, 2));\n\n    // Make a POST request to addAccountKey endpoint\n    fetch(endpoint.addAccountKey, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(conn, null, 2)\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        // Redirect to sygnalAppPage\n        window.location.replace(sygnalAppPage);  // Assuming sygnalAppPage is globally available\n    })\n    .catch(error => {\n        alert(\"Unable to complete setup, please message web@sygnal.com\");\n        console.error('There was a problem with the fetch operation:', error.message);\n    });\n\n    console.groupEnd();\n}\n\n\n/*\n  */\n\n\n//import { WfuUserInfo, WfuUser } from 'https://localhost/src/modules/webflow-membership.js'; \n\n// import { WfuUserInfo, WfuUser } from 'https://cdn.jsdelivr.net/gh/sygnaltech/webflow-util@4.2/src/modules/webflow-membership.js'; \n\n\n\n/* OAUTH SUPPORT \n\n// Capture login event\n$(function() {\n\n  var membership = new WfuUserInfo({\n    loadUserInfoCallback: loadUserInfoCallback,\n    userInfoUpdatedCallback: userInfoUpdatedCallback,\n    userLogoutPurge: userLogoutPurge\n  }).init(); \n  \n});  \n  \n// Populate with additional data \nasync function loadUserInfoCallback(user) {\n\n    const url = `https://eoszvncep8g121v.m.pipedream.net/user?email=${user.email}`;\n    //        console.debug(url); \n\n    await $.getJSON( url, function( data ) {\n\n//      console.debug(data); \n//      console.debug(user); \n      \n      // Guaranteed (?)\n      user.user_id = data.user_id;\n      user.name = data.name;\n      user.email = data.email;\n      user.accept_communications = data.accept_communications; \n      \n      // Optional (Meta)\n//      user.meta.account_id = data.account_id; \n      user.meta.set(\"account_id\", data.account_id); \n\n//      console.debug(user); \n      \n//      user.account_id = \n//        localStorage.setItem('user', JSON.stringify(data)); \n\n        // https://stackoverflow.com/questions/5671451/creating-a-javascript-cookie-on-a-domain-and-reading-it-across-sub-domains\n\n      // Save User Data as domain cookie\n      // to be accessible to companion oauth function \n      const cookieName = \"wfuUser\";\n      const cookieValue = data.user_id; // JSON.stringify(data); \n      const myDate = (new Date()).addDays(7);\n      document.cookie = cookieName +\"=\" + cookieValue + \"; expires=\" + myDate \n          + \"; domain=.sygnal.com; path=/\";\n      \n    }); \n  \n//  alert(\"load\"); \n//  console.log(\"LOADING USER\");\n}\n\n  \n// Populate with additional data \nasync function userInfoUpdatedCallback(user) {\n\n  var name = user.email;\n  if (user.name)\n    name = user.name;\n  \n  $(\"[wfu-bind='$user.name']\").text(name); \n  \n} \n\nasync function userLogoutPurge() {\n  \n  // Delete User Data cookie\n  document.cookie = `wfuUser=; expires=Thu, 01 Jan 1970 00:00:00 UTC; domain=.sygnal.com; path=/;`;\n\n}\n\n\n*/\n\n\n\n"],
  "mappings": "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",
  "names": ["endpoint", "sygnalAppPage", "oAuthUrl", "installAppElement", "completeOAuth", "loadAppSettings", "resetSelect", "sel", "defaultOption", "getUserInfo", "user", "configKey", "configSite", "configApp", "option", "response", "account", "accountNameElement", "key", "selectedKey", "sites", "site", "generateCodeBtn", "codeElement", "searchParams", "conn", "error"]
}
