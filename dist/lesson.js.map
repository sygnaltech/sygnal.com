{
  "version": 3,
  "sources": ["../src/lesson.ts"],
  "sourcesContent": ["\n// ORIGIN \n// https://codepen.io/memetican/pen/yLEvrpx/cc50a552fdadbde41e0a8eeba9e95101\n\nconst initLesson = () => {\n\n\n    // Article hotkeys\n    window['sa5'] = window['sa5'] || [];\n    window['sa5'].push(['hotkeys', \n    (hotkeyHandler) => {\n\n        // Edit - CTRL+SHIFT+E\n        hotkeyHandler.register(\"ctrl+shift+e\", () => {\n            location.href = '?edit';\n        });\n\n//         // Fallback Docs - CTRL+ALT+SHIFT+N\n//         hotkeyHandler.register(\"ctrl+alt+m\", () => { // ,  ctrl+shift+2 \n\n//             // TypeScript\n//             let docsUrl: string | null = document.querySelector(\"meta[name='page:notes:mindmap']\")?.getAttribute(\"content\") || null;\n\n//             console.log(\"ctrl+alt+m\"); \n\n//             if (docsUrl) {\n//                 window.open(docsUrl, \"_blank\");\n//             }\n\n//         });\n\n//         // CTRL+ALT+N\n//         hotkeyHandler.register(\"ctrl+alt+f\", () => { // , ctrl+shift+1\n            \n//             console.log(\"ctrl+alt+f\"); \n\n//             // JavaScript\n//             var docsUrl = document.querySelector(\"meta[name='page:notes:folder']\")?.getAttribute(\"content\");\n\n//         //        var docsUrl =\n//         //    $(\"meta[name='sygnal:docs']\").attr(\"content\"); \n//         //       || $(\"meta[name='sygnal:docs:fallback']\").attr(\"content\"); \n\n//             console.log(`docsUrl = ${docsUrl}`); \n        \n//             if (docsUrl)\n//                 window.open(docsUrl, \"_blank\");\n//             else\n//                 alert(\"No Notes Doc defined.\");           \n// //            window.location.href = `/search`;\n//         }); \n\n//         // CTRL+ALT+N\n//         hotkeyHandler.register(\"ctrl+alt+n\", () => { // , ctrl+shift+1\n            \n//             console.log(\"ctrl+alt+n\"); \n\n//             // JavaScript\n//             var docsUrl = document.querySelector(\"meta[name='page:notes:mindmap']\")?.getAttribute(\"content\");\n\n//         //        var docsUrl =\n//         //    $(\"meta[name='sygnal:docs']\").attr(\"content\"); \n//         //       || $(\"meta[name='sygnal:docs:fallback']\").attr(\"content\"); \n\n//             console.log(`docsUrl = ${docsUrl}`); \n        \n//             if (docsUrl)\n//                 window.open(docsUrl, \"_blank\");\n//             else\n//                 alert(\"No Notes Doc defined.\");           \n// //            window.location.href = `/search`;\n//         });\n\n    }]);\n\n\n\n\n// CTRL key change CSS flag? \n// if depressed for 250ms? \n\n\n    const daysRecent: number = 60; \n\n    // Find poster video overrides and apply them\n    const elements = document.querySelectorAll(`script[type='course-info']`);\n    elements.forEach((element) => {\n\n        var data = JSON.parse(element.innerHTML);\n      \n        const lesson = element.closest(\".course-item\");\n        if (lesson == null)\n            return; // continue \n\n        console.log(`status ${data.status}`); \n        \n        if(data.status === \"work-in-progress\") {\n          \n            lesson.classList.add(\"syg-u-work-in-progress\");\n\n            const label = lesson.querySelector(\".course-item-label-text\");\n            if (label != null) {\n                label.innerHTML = \"WIP\";\n                label.classList.remove(\"w-dyn-bind-empty\");\n            }\n\n        } else if(data.dateUpdated) {\n\n            const dt: Date = new Date(data.dateUpdated);\n            const time: number = new Date().getTime() - dt.getTime();\n            const days: number = time / (1000 * 3600 * 24); \n//            console.log (`days since created ${days}`);\n                        \n            if (days <= daysRecent) {\n\n                lesson.classList.add(\"syg-u-new\"); // syg-u-updated\n\n                const label = lesson.querySelector(\".course-item-label-text\");\n                if (label != null) {\n                    label.innerHTML = \"REV\";\n                    label.classList.remove(\"w-dyn-bind-empty\");\n                }\n\n            }\n          \n        } else if(data.dateCreated) {\n\n            const dt: Date = new Date(data.dateCreated);\n            const time: number = new Date().getTime() - dt.getTime();\n            const days: number = time / (1000 * 3600 * 24); \n//            console.log (`days since created ${days}`);\n            \n            if (days <= daysRecent) {\n\n                lesson.classList.add(\"syg-u-new\"); // syg-u-updated\n\n                const label = lesson.querySelector(\".course-item-label-text\");\n                if (label != null) {\n                    label.innerHTML = \"NEW\";\n                    label.classList.remove(\"w-dyn-bind-empty\");\n                }\n\n            }\n          \n        }\n\n    }); \n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initLesson)\n\n"],
  "mappings": ";;;AAIA,MAAM,aAAa,MAAM;AAIrB,WAAO,SAAS,OAAO,UAAU,CAAC;AAClC,WAAO,OAAO,KAAK;AAAA,MAAC;AAAA,MACpB,CAAC,kBAAkB;AAGf,sBAAc,SAAS,gBAAgB,MAAM;AACzC,mBAAS,OAAO;AAAA,QACpB,CAAC;AAAA,MA0DL;AAAA,IAAC,CAAC;AASF,UAAM,aAAqB;AAG3B,UAAM,WAAW,SAAS,iBAAiB,4BAA4B;AACvE,aAAS,QAAQ,CAAC,YAAY;AAE1B,UAAI,OAAO,KAAK,MAAM,QAAQ,SAAS;AAEvC,YAAM,SAAS,QAAQ,QAAQ,cAAc;AAC7C,UAAI,UAAU;AACV;AAEJ,cAAQ,IAAI,UAAU,KAAK,QAAQ;AAEnC,UAAG,KAAK,WAAW,oBAAoB;AAEnC,eAAO,UAAU,IAAI,wBAAwB;AAE7C,cAAM,QAAQ,OAAO,cAAc,yBAAyB;AAC5D,YAAI,SAAS,MAAM;AACf,gBAAM,YAAY;AAClB,gBAAM,UAAU,OAAO,kBAAkB;AAAA,QAC7C;AAAA,MAEJ,WAAU,KAAK,aAAa;AAExB,cAAM,KAAW,IAAI,KAAK,KAAK,WAAW;AAC1C,cAAM,OAAe,IAAI,KAAK,EAAE,QAAQ,IAAI,GAAG,QAAQ;AACvD,cAAM,OAAe,QAAQ,MAAO,OAAO;AAG3C,YAAI,QAAQ,YAAY;AAEpB,iBAAO,UAAU,IAAI,WAAW;AAEhC,gBAAM,QAAQ,OAAO,cAAc,yBAAyB;AAC5D,cAAI,SAAS,MAAM;AACf,kBAAM,YAAY;AAClB,kBAAM,UAAU,OAAO,kBAAkB;AAAA,UAC7C;AAAA,QAEJ;AAAA,MAEJ,WAAU,KAAK,aAAa;AAExB,cAAM,KAAW,IAAI,KAAK,KAAK,WAAW;AAC1C,cAAM,OAAe,IAAI,KAAK,EAAE,QAAQ,IAAI,GAAG,QAAQ;AACvD,cAAM,OAAe,QAAQ,MAAO,OAAO;AAG3C,YAAI,QAAQ,YAAY;AAEpB,iBAAO,UAAU,IAAI,WAAW;AAEhC,gBAAM,QAAQ,OAAO,cAAc,yBAAyB;AAC5D,cAAI,SAAS,MAAM;AACf,kBAAM,YAAY;AAClB,kBAAM,UAAU,OAAO,kBAAkB;AAAA,UAC7C;AAAA,QAEJ;AAAA,MAEJ;AAAA,IAEJ,CAAC;AAAA,EAEL;AAEA,WAAS,iBAAiB,oBAAoB,UAAU;",
  "names": []
}
