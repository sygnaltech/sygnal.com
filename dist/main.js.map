{
  "version": 3,
  "sources": ["../src/gista.ts", "../src/main.ts"],
  "sourcesContent": ["\n// ORIGIN \n// https://codepen.io/memetican/pen/XWoWxNG/5f4ec4166cb4df430a34dd7b91fff206?editors=0010\n\nexport async function initGistaAsync() {\n\n    // Create a new DOM parser to parse the SVG string\n    let parser: DOMParser = new DOMParser();\n    let svgString: string = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 82.146 82.146\">\n            <circle cx=\"31.073\" cy=\"58.368\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n            <circle cx=\"51.073\" cy=\"58.368\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n            <circle cx=\"61.073\" cy=\"41.047\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n            <circle cx=\"51.073\" cy=\"23.727\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n            <circle cx=\"31.073\" cy=\"23.728\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n            <circle cx=\"21.073\" cy=\"41.047\" r=\"17.288\" stroke-width=\"6\" fill=\"none\" stroke=\"currentColor\"></circle>\n        </svg>`;\n\n    // Convert the SVG string into a DOM node\n    let svgNode: Element = parser.parseFromString(svgString, 'image/svg+xml').documentElement;\n\n    // Get the #gista-embed-button element and its img child\n    // let buttonElement = document.querySelector('#gista-embed-button');\n\n    // Define the callback function that will be called when the element is added\n    function handleNewElement(element: HTMLElement): void {\n        // Modify the element here\n    //    console.log(\"New element added:\", element); \n        \n        element.classList.add('gista-button');\n            // Remove the inline styles for width and height\n        \n        element.style.cssText = '';\n        //    element.style.height = '';\n        //    element.style.bottom = '';\n        //    element.style.right = ''; \n\n        // Replace the img child with the new SVG node \n        // element.replaceChild(svgNode, imgChild);\n        let imgChild: HTMLImageElement | null = element.querySelector('img');\n        if (imgChild) {\n            imgChild.src = 'https://uploads-ssl.webflow.com/59b8d49f7fdf9700017d780f/64e2bfafeccea9001016cfbe_dp_icon_white_trans.svg';\n        }\n                \n    // <img src=\"https://public.gista.co/images/logo/dp_icon_white.png\" alt=\"Button Image\" style=\"width: 100%; height: 100%; border-radius: 9999px;\">\n            \n        //    Webflow.require('ix2').init(); \n            \n        // Set up the MutationObserver to watch the element\n        const mutationCallback: MutationCallback = (mutationsList: MutationRecord[], observer: MutationObserver) => {\n            for(let mutation of mutationsList) {\n                // Handle different types of mutations. \n                // For this example, let's focus on attribute changes\n                if (mutation.type === 'attributes') {\n                    // console.log(`Attribute ${mutation.attributeName} was modified.`);\n                    if (mutation.target instanceof HTMLElement) {\n\n//                        console.log(mutation.target); \n\n                        // Ignore X\n                        if (mutation.target.tagName == \"DIV\" && mutation.target.innerText == '\u2715') {\n                            continue;\n                        }\n\n                        mutationObserver.disconnect();\n\n                        let display = mutation.target.style.display; \n                        mutation.target.style.cssText = '';\n                        mutation.target.style.display = display;\n\n                        mutationObserver.observe(element, { attributes: true, childList: true, subtree: true }); \n\n                    }\n                }\n            }\n        };\n\n        const mutationObserver: MutationObserver = new MutationObserver(mutationCallback);\n\n        // Assuming 'element' is defined and is of type HTMLElement or Element\n        // Start observing the element for attribute changes\n        mutationObserver.observe(element, { attributes: true, childList: true, subtree: true });\n\n    }\n\n    /*\n    // Create a new MutationObserver and provide the callback\n    const observer = new MutationObserver((mutationsList, observer) => {\n        for(let mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n                const addedNodes = Array.from(mutation.addedNodes);\n                const targetElement = addedNodes.find(node => node.id === 'gista-embed-button');\n                if (targetElement) {\n                    handleNewElement(targetElement);\n                    observer.disconnect();  // Disconnect the observer if you only want to detect the element once\n                }\n            }\n        }\n    });\n\n    // Start observing the document with the configured parameters\n    observer.observe(document.body, { childList: true, subtree: true });\n*/ \n\n    // Define the type of the target element\n    type TargetElement = HTMLElement & { id?: string };\n\n    // Create a new MutationObserver and provide the callback\n    const observer = new MutationObserver((mutationsList: MutationRecord[], observer: MutationObserver) => {\n        for(let mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n                const addedNodes: Node[] = Array.from(mutation.addedNodes);\n                const targetElement: TargetElement | undefined = addedNodes.find(node => 'id' in node && node.id === 'gista-embed-button') as TargetElement;\n                if (targetElement) {\n                    handleNewElement(targetElement);\n                    observer.disconnect();  // Disconnect the observer if you only want to detect the element once\n                }\n            }\n        }\n    });\n\n    // Start observing the document with the configured parameters\n    observer.observe(document.body, { childList: true, subtree: true });\n\n}\n\n\n", "\n// ORIGIN \n// https://codepen.io/memetican/pen/yLEvrpx/cc50a552fdadbde41e0a8eeba9e95101\n\nimport { initGistaAsync } from \"./gista\";\n\n\n\nconst initGlobal = () => {\n\n    console.log(\"1.2.2\");\n\n// Can install script if we want to\n// <!-- Sygnal Attributes 5 | Hotkeys -->\n// <script defer\n// src=\"https://cdn.jsdelivr.net/gh/sygnaltech/webflow-util@5.2/dist/nocode/webflow-hotkeys.min.js\"\n// ></script> \n\n    initGistaAsync();\n\n//ctrl+o open\n//ctrl+n new\n \n\n    // Global hotkeys\n    window['sa5'] = window['sa5'] || [];\n    window['sa5'].push(['hotkeys', \n    (hotkeyHandler) => {\n\n        // Help - F1\n        hotkeyHandler.register(\"f1\", () => {\n            window.location.href = `/about`;\n        });\n\n        // User home - F2\n        hotkeyHandler.register(\"f2\", () => {\n            window.location.href = `/u/home`;\n        });\n\n        // Search Page - CTRL+P ctrl+f, \n        hotkeyHandler.register(\"ctrl+p\", () => {\n            window.location.href = `/search`;\n        });\n\n        // Search Page - CTRL+SHIFT+3 \n        hotkeyHandler.register(\"ctrl+alt+shift+m\", () => {\n            console.log(\"test\");\n\n            const docsUrl = `https://www.mindomo.com/mindmap/15e2b12a299a4a929225effc1292a1dd`;\n\n            if (docsUrl)\n                window.open(docsUrl, \"_blank\");\n            // else\n            //     alert(\"No Notes Doc defined.\");    \n\n        });\n\n        // Fallback Docs - CTRL+ALT+SHIFT+N\n        hotkeyHandler.register(\"ctrl+alt+m\", () => { // ,  ctrl+shift+2 \n\n            // TypeScript\n            let docsUrl: string | null = document.querySelector(\"meta[name='page:notes:mindmap']\")?.getAttribute(\"content\") || null;\n\n            console.log(\"ctrl+alt+m\"); \n\n            if (docsUrl) {\n                window.open(docsUrl, \"_blank\");\n            }\n\n        });\n\n        // CTRL+ALT+N\n        hotkeyHandler.register(\"ctrl+alt+f\", () => { // , ctrl+shift+1\n            \n            console.log(\"ctrl+alt+f\"); \n\n            // JavaScript\n            var docsUrl = document.querySelector(\"meta[name='page:notes:folder']\")?.getAttribute(\"content\");\n\n        //        var docsUrl =\n        //    $(\"meta[name='sygnal:docs']\").attr(\"content\"); \n        //       || $(\"meta[name='sygnal:docs:fallback']\").attr(\"content\"); \n\n            console.log(`docsUrl = ${docsUrl}`); \n        \n            if (docsUrl)\n                window.open(docsUrl, \"_blank\");\n            // else\n            //     alert(\"No Notes Doc defined.\");           \n//            window.location.href = `/search`;\n        }); \n\n        // CTRL+ALT+N\n        hotkeyHandler.register(\"ctrl+alt+n\", () => { // , ctrl+shift+1\n            \n            console.log(\"ctrl+alt+n\"); \n\n            // JavaScript\n            var docsUrl = document.querySelector(\"meta[name='page:notes:mindmap']\")?.getAttribute(\"content\");\n\n        //        var docsUrl =\n        //    $(\"meta[name='sygnal:docs']\").attr(\"content\"); \n        //       || $(\"meta[name='sygnal:docs:fallback']\").attr(\"content\"); \n\n            console.log(`docsUrl = ${docsUrl}`); \n        \n            if (docsUrl)\n                window.open(docsUrl, \"_blank\");\n            // else\n            //     alert(\"No Notes Doc defined.\");           \n//            window.location.href = `/search`;\n        }); \n\n        // Find - CTRL+F\n        hotkeyHandler.register(\"ctrl+f, shift+ctrl+f\", () => {\n\n// console.log(\"ctrl+f a pressed\"); \n\n            // $('html').animate({scrollTop: 0}, 500);\n            // $(\"#menu-search\").click(); \n\n            // Smooth scroll to top\n//            window.scrollTo({ top: 0, behavior: 'smooth' });\n\n// Toggle the dropdown\nconst dropdownToggle = document.querySelector('#menu-search .w-dropdown-toggle') as HTMLElement; \ndropdownToggle.dispatchEvent(new Event('mousedown'));\ndropdownToggle.dispatchEvent(new Event('mouseup'));\n\n// Give input to the search input\nconst search = document.querySelector(\"#search-input\") as HTMLElement;\nsearch.focus();\nsearch.click();\n\n// let event = new Event('click', { bubbles: true, cancelable: true });\n// let element = document.querySelector('#menu-search > .navigation-link.flex.tight > img') as Element;\n// console.log(\"event\", event);\n// console.log(\"element\", element); \n// element.dispatchEvent(event);\n// element = document.querySelector('#menu-search > .navigation-link > img') as Element;\n// element.dispatchEvent(event);\n// element = document.querySelector('#menu-search img') as Element;\n// element.dispatchEvent(event);\n// element = document.querySelector('#menu-search') as Element;\n// element.dispatchEvent(event);\n\n\n// let event = new PointerEvent('pointerdown', {\n//     bubbles: true,\n//     cancelable: true,\n//     pointerId: 1\n// });\n// let element = document.querySelector('#menu-search > .navigation-link.flex.tight > img') as Element;\n// element.dispatchEvent(event);\n\n// console.log(\"pointerDown\");\n\n//  element = document.querySelector('div#menu-search.dropdown.w-dropdown') as Element;\n//  element.dispatchEvent(event);\n\n\n// let event = new PointerEvent('click', { // 'pointerdown', {\n//     bubbles: true,\n//     cancelable: true,\n//     pointerId: 1\n// });\n// let element = document.querySelector('#w-dropdown-toggle-3 div') as Element;\n// element.dispatchEvent(event);\n\n// console.log(element);\n// console.log(event); \n\n//             // Simulate click on menu-search\n//             let menuSearch = document.getElementById(\"menu-search\");\n//             if (menuSearch) {\n//                 menuSearch.click();\n// console.log(\"searching;\");\n//             }\n\n    //        window.location.href = `/search`;\n        });\n\n    }]);\n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initGlobal)\n\n"],
  "mappings": "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",
  "names": ["initGistaAsync", "parser", "svgString", "svgNode", "handleNewElement", "element", "imgChild", "mutationCallback", "mutationsList", "observer", "mutation", "mutationObserver", "display", "targetElement", "node", "initGlobal", "initGistaAsync", "hotkeyHandler", "docsUrl", "dropdownToggle", "search"]
}
